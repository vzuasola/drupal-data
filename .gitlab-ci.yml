variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - tests
  - package
  - deploy-test
  - deploy-staging
  - deploy-production

before_script:
  - export PACKAGE_VERSION="$CI_COMMIT_REF_NAME.$CI_PIPELINE_ID"
  - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
  - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
  - export GITLAB_EMAIL="$GITLAB_USER_EMAIL"

php vulnerability checker:
  stage: tests
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/php_vulnerability:latest
  script:
    - /tmp/vendor/bin/local-php-security-checker
  allow_failure: true


create package:
  stage: package
  when: manual
  tags: [build, dind]
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:dind
  needs: [php vulnerability checker]
  script:
    - eval $(ssh-agent -s)
    - echo "$FECORE_DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - touch ~/.ssh/config
    - touch ~/.ssh/known_hosts
    - chmod -R 400 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - DOCKER_BUILDKIT=1 docker build --build-arg PACKAGE_VERSION=$PACKAGE_VERSION --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME --build-arg ARTIFACTORY_URL=$ARTIFACTORY_URL --build-arg ARTIFACTORY_PASSWORD=$ARTIFACTORY_PASSWORD --ssh default --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -f automation/Dockerfile.create-package .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker rmi $CI_REGISTRY_IMAGE:latest


tct:
  stage: deploy-test
  environment:
    name: testing/dafa
  variables:
    env: tct
    STACK: dafa-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

tct-mobile-stack:
  stage: deploy-test
  environment:
    name: testing/mobile-dafa
  variables:
    env: tct
    STACK: mobile-dafa-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

tct-japan-stack:
  stage: deploy-test
  environment:
    name: testing/japan
  variables:
    env: tct
    STACK: japan-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

tct-row-stack:
  stage: deploy-test
  environment:
    name: testing/row
  variables:
    env: tct
    STACK: row-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

staging:
  stage: deploy-staging
  environment:
    name: staging/dafa
  variables:
    env: stg
    STACK: dafa-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

staging-mobile-stack:
  stage: deploy-staging
  environment:
    name: staging/mobile-dafa
  variables:
    env: stg
    STACK: mobile-dafa-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

staging-japan-stack:
  stage: deploy-staging
  environment:
    name: staging/japan
  variables:
    env: stg
    STACK: japan-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

staging-row-stack:
  stage: deploy-staging
  environment:
    name: staging/row
  variables:
    env: stg
    STACK: row-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

staging-nextbet-stack:
  stage: deploy-staging
  environment:
    name: staging/nextbet
  variables:
    env: stg
    STACK: nextbet-stack
  script:
    - export DEPLOY_TOKEN DEPLOY_URL
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment

production:
  stage: deploy-production
  environment:
    name: production/dafa
  variables:
    env: prd
    stack: dafa-stack
  script:
    - DEPLOY_TOKEN=$PROD_DEPLOY_TOKEN
    - DEPLOY_URL=$PROD_DEPLOY_URL
    - export DEPLOY_TOKEN DEPLOY_URL
    - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
    - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment
  only:
    - /^release-.*$/
    - /^hotfix-.*$/
    - tags
    - /^jenkins/

production-mobile-stack:
  stage: deploy-production
  environment:
    name: production/mobile-dafa
  variables:
    env: prd
    stack: mobile-dafa-stack
  script:
    - DEPLOY_TOKEN=$PROD_DEPLOY_TOKEN
    - DEPLOY_URL=$PROD_DEPLOY_URL
    - export DEPLOY_TOKEN DEPLOY_URL
    - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
    - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment
  only:
    - /^release-.*$/
    - /^hotfix-.*$/
    - tags
    - /^jenkins/

production-japan-stack:
  stage: deploy-production
  environment:
    name: production/japan
  script:
    - DEPLOY_PROD=$DEPLOY_PROD_JAPAN python -u automation/run.py --stage deploy-production
  when: manual
  dependencies:
    - create package
    - staging
  artifacts:
    paths:
      - automation/deployed/*.jsonl
    expire_in: 1 month
  only:
    - /^release-.*$/
    - /^hotfix-.*$/
    - tags

production-row-stack:
  stage: deploy-production
  environment:
    name: production/row
  script:
    - DEPLOY_PROD=$DEPLOY_PROD_ROW python -u automation/run.py --stage deploy-production
  when: manual
  dependencies:
    - create package
    - staging
  only:
    - /^release-.*$/
    - /^hotfix-.*$/
    - tags
    - /^jenkins/
  tags:
    - taiwan-prd-01

production-nextbet-stack:
  stage: deploy-production
  environment:
    name: production/nextbet
  variables:
    env: prd
    stack: nextbet-stack
  script:
    - DEPLOY_TOKEN=$PROD_DEPLOY_TOKEN
    - DEPLOY_URL=$PROD_DEPLOY_URL
    - export DEPLOY_TOKEN DEPLOY_URL
    - export DEPLOY_STATUS_URL="$DEPLOY_URL/lastBuild/api/json"
    - export DEPLOY_RESULT_URL="$DEPLOY_URL/lastBuild/logText/progressiveText?start=0"
    - bash automation/jenkins_deploy.sh
  when: manual
  needs: [create package]
  tags: [build, docker]
  image: registry.gitlab.com/sportion/marketing/websites/websites-commons/shared-images/deployment
  only:
    - /^release-.*$/
    - /^hotfix-.*$/
    - tags
    - /^jenkins/
