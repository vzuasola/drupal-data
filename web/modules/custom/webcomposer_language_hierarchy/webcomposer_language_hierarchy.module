<?php

/**
 * @file
 * Add sublanguage handling functionality to Drupal.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\language\ConfigurableLanguageInterface;
use Drupal\language\Entity\ConfigurableLanguage;

/**
 * Implements hook_language_fallback_candidates_alter()
 */
function webcomposer_language_hierarchy_language_fallback_candidates_alter(array &$candidates, array $context) {
  $attempted_langcode = $context['langcode'];
  $candidates = array();
  
  /** @var Drupal\language\Entity\ConfigurableLanguage $language */
  $language = ConfigurableLanguage::load($attempted_langcode);
  while (!empty($language)) {
    $fallback_langcode = $language->getThirdPartySetting('webcomposer_language_hierarchy', 'webcomposer_fallback_langcode', '');
    if($fallback_langcode == 'site_default_language')  {
      $fallback_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
    }  
    // Include this candidate if there was a fallback language and it was not
    // the same as the original langcode (which LocaleLookup already tried) and
    // if it is not already in the list. Avoid endless loops and fruitless work.
    if (!empty($fallback_langcode) && $attempted_langcode != $fallback_langcode && !isset($candidates[$fallback_langcode])) {
      $candidates[$fallback_langcode] = $fallback_langcode;
      $language = ConfigurableLanguage::load($fallback_langcode);
    }
    else {
      $language = NULL;
    }
  }

  // If the fallback context is not locale_lookup, allow
  // LanguageInterface::LANGCODE_NOT_SPECIFIED as a final candidate after the
  // normal fallback chain, and put the attempted language as the top candidate.
  // LocaleLookup would already have tried the attempted language, and should
  // only be based on explicit configuration. Only languages within this
  // fallback chain are allowed otherwise.
  if (empty($context['operation']) || $context['operation'] != 'locale_lookup') {
    $candidates = [$attempted_langcode => $attempted_langcode] + $candidates;
    $candidates[LanguageInterface::LANGCODE_NOT_SPECIFIED] = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function webcomposer_language_hierarchy_form_language_admin_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var Drupal\language\Entity\ConfigurableLanguage $this_language */
  $this_language = $form_state->getFormObject()->getEntity();

  $languages = Drupal::languageManager()->getLanguages();
  $default_language =  \Drupal::languageManager()->getDefaultLanguage();
  $options = array();
  foreach($languages as $language) {
    // Only include this language if it's not itself.
    if ($language->getId() != $this_language->getId()) {
      $options[$language->getId()] = $language->getName();
    }
  }

  // custom label
  $form['webcomposer_language_custom_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Language Label'),
    '#description' => t('Note: Set custom label that will override the langauge name and be displayed on the frontend language selector.'),
    '#default_value' => $this_language->getThirdPartySetting('webcomposer_language_hierarchy', 'webcomposer_language_custom_label'),
  );

  $options['site_default_language'] = t('Site Default Language(' . $default_language->getName(). ')');
  $form['webcomposer_language_hierarchy_fallback_langcode'] = array(
    '#type' => 'select',
    '#title' => t('Translation fallback language'),
    '#description' => t('When a translation is not available for text, this fallback language is used. If that is not available either, the fallback continues onward.'),
    '#options' => $options,
    '#default_value' => $this_language->getThirdPartySetting('webcomposer_language_hierarchy', 'webcomposer_fallback_langcode', ''),
    // Allow to not fall back on any other language.
    '#empty_option' => t('-None-'),
  );

  $form['#entity_builders'][] = 'webcomposer_language_hierarchy_form_language_admin_edit_form_builder';
}

/**
 * Entity builder for the language form language_fallback options.
 *
 * @see language_fallback_form_language_admin_edit_form_alter()
 */
function webcomposer_language_hierarchy_form_language_admin_edit_form_builder($entity_type, ConfigurableLanguageInterface $this_language, &$form, FormStateInterface $form_state) {
  $this_language->setThirdPartySetting(
    'webcomposer_language_hierarchy',
    'webcomposer_fallback_langcode',
    $form_state->getValue('webcomposer_language_hierarchy_fallback_langcode')
  );
  if ($form_state->getValue('webcomposer_language_custom_label')) {
    $this_language->setThirdPartySetting(
        'webcomposer_language_hierarchy',
        'webcomposer_language_custom_label', 
        $form_state->getValue('webcomposer_language_custom_label')
    );
  } else {
    $this_language->unsetThirdPartySetting(
      'webcomposer_language_hierarchy',
      'webcomposer_language_custom_label'
    );
  }
}
