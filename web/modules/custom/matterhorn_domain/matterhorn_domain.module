<?php

use phpoffice\phpexcel;

drupal_classloader()->registerNamespace('Matterhorn\Domains', drupal_get_path('module', 'matterhorn_domain') . '/lib');
matterhorn_domain_init(); // this is a workaround to always make hook init execute even if drupal does not yet register the hook

/**
 * Implements hook_init().
 * load import and export modules library
 *
 */
function matterhorn_domain_init() {
    $legacy = variable_get('matterhorn_domain_legacy', TRUE);

    if ($legacy) {
        // load legacy libraries
        module_load_include('inc', 'matterhorn_domain', 'legacy/matterhorn_domain.legacy.read');
        module_load_include('inc', 'matterhorn_domain', 'legacy/matterhorn_domain.legacy.write');
        module_load_include('inc', 'matterhorn_domain', 'legacy/matterhorn_domain.legacy.export');
    } else {
        // load database and export libraries
        module_load_include('inc', 'matterhorn_domain', 'includes/matterhorn_domain.export');
        module_load_include('inc', 'matterhorn_domain', 'includes/matterhorn_domain.read');
        module_load_include('inc', 'matterhorn_domain', 'includes/matterhorn_domain.write');
    }

    // load import libraries
    module_load_include('inc', 'matterhorn_domain', 'includes/matterhorn_domain.import');
    module_load_include('inc', 'matterhorn_domain', 'includes/matterhorn_domain.import.batch');

    return;
}

/**
 * Implements hook_form_alter().
 */
function matterhorn_domain_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'matterhorn_domain_admin_settings') {
        $form['#submit'][] = 'drupal_flush_all_caches';
    }
}

/**
 * Implements hook_permission().
 */
function matterhorn_domain_permission() {
    return array(
        'administer matterhorn domain' => array(
            'title' => t('Administer matterhorn domain'),
        ),
        'administer matterhorn domain settings' => array(
            'title' => t('Administer matterhorn domain settings'),
        ),
    );
}

/**
 * Implementation of the hook_menu() function
 *
 */
function matterhorn_domain_menu() {
    $items = array();
    $legacy = variable_get('matterhorn_domain_legacy', TRUE);

    $items['admin/config/framework/domain'] = array(
        'title' => 'Domains',
        'description' => 'Manage Domains and Domain-Specific Variables',
        'page callback' => 'matterhorn_domain_domains',
        'access arguments' => array('administer matterhorn domain'),
        'file' => 'matterhorn_domain.admin.inc',
    );
    $items['admin/config/framework/domain/domains'] = array(
        'title' => 'Domains',
        'weight' => 0,
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/config/framework/domain/mapping'] = array(
        'title' => 'Mapping',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_admin_mapping'),
        'access arguments' => array('administer matterhorn domain'),
        'weight' => 5,
        'file' => 'matterhorn_domain.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/config/framework/domain/variables'] = array(
        'title' => 'Placeholders',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_variables'),
        'access arguments' => array('administer matterhorn domain'),
        'weight' => 10,
        'file' => 'matterhorn_domain.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/config/framework/domain/import'] = array(
        'title' => 'Import',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_import'),
        'access arguments' => array('administer matterhorn domain'),
        'weight' => 11,
        'file' => 'matterhorn_domain.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/config/framework/domain/export'] = array(
        'title' => 'Export',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_export'),
        'access arguments' => array('administer matterhorn domain'),
        'weight' => 12,
        'file' => 'matterhorn_domain.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/config/framework/domain/changelog'] = array(
        'title' => 'Changelog',
        'page callback' => 'matterhorn_domain_list_log',
        'access arguments' => array('administer matterhorn domain'),
        'weight' => 15,
        'file' => 'matterhorn_domain.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/config/framework/domain/changelog/%'] = array(
        'page callback' => 'matterhorn_domain_log_autocomplete',
        'page arguments' => array(5),
        'access arguments' => array('administer matterhorn domain'),
        'type' => MENU_CALLBACK,
    );
    $items['admin/config/framework/domain/changelog/user'] = array(
        'page callback' => 'matterhorn_domain_log_autocomplete_user',
        'access arguments' => array('administer matterhorn domain'),
        'type' => MENU_CALLBACK,
    );
    $items['admin/config/framework/domain/settings'] = array(
        'title' => 'Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_admin_settings'),
        'access arguments' => array('administer matterhorn domain settings'),
        'weight' => 20,
        'file' => 'matterhorn_domain.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/config/framework/domain/domains/edit/%'] = array(
        'title' => 'Edit Domain',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_edit_domains', 6),
        'access arguments' => array('administer matterhorn domain'),
        'file' => 'matterhorn_domain.admin.inc',
    );
    $items['admin/config/framework/domain/domains/delete/%'] = array(
        'title' => 'Delete Domain',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_delete_domains', 6),
        'access arguments' => array('administer matterhorn domain'),
        'file' => 'matterhorn_domain.admin.inc',
    );
    $items['admin/config/framework/domain/groups/edit/%'] = array(
        'title' => 'Edit Domain Group',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_edit_groups', 6),
        'access arguments' => array('administer matterhorn domain'),
        'file' => 'matterhorn_domain.admin.inc',
    );

    $items['admin/config/framework/domain/groups/delete/%'] = array(
        'title' => 'Delete Domain Group',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_delete_groups', 6),
        'access arguments' => array('administer matterhorn domain'),
        'file' => 'matterhorn_domain.admin.inc',
    );
    $items['admin/config/framework/domain/variables/edit/%'] = array(
        'title' => 'Edit Placeholder',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_edit_variables', 6),
        'access arguments' => array('administer matterhorn domain'),
        'file' => 'matterhorn_domain.admin.inc',
    );
    $items['admin/config/framework/domain/variables/delete/%'] = array(
        'title' => 'Edit Placeholder',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('matterhorn_domain_delete_variables', 6),
        'access arguments' => array('administer matterhorn domain'),
        'file' => 'matterhorn_domain.admin.inc',
    );

    return $items;
}

/**
 * Implementation of the hook_theme() function
 *
 */
function matterhorn_domain_theme() {
    return array(
        'matterhorn_domain_variables' => array(
            'arguments' => array('form' => NULL),
            'render element' => 'form',
        ),
        'matterhorn_domain_list_domains' => array(
            'file' => 'matterhorn_domain.admin.inc',
            'template' => '/templates/matterhorn-domain-list-domains',
            'render element' => 'form',
        ),
    );
}

/**
 * Implementation of hook_cron().
 *
 * Remove expired log messages.
 */
function matterhorn_domain_cron() {
    // Cleanup the watchdog table
    $log_count = db_query('SELECT MAX(lid) FROM {matterhorn_domain_log}')->fetchField();
    $log_limit = (int) variable_get('matterhorn_domain_row_limit', 1000);
    $max = $log_count - $log_limit;
    db_delete('matterhorn_domain_log')->condition('lid', $max, '<=')->execute();
}

/**
 * Implementation of the hook_token() function
 *
 */
function matterhorn_domain_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $values = array();
    $token = variable_get('matterhorn_domain_token', 'matterhorn');

    switch ($type) {
        case $token:
            global $language;
            $values = &drupal_static(__FUNCTION__);
            if(empty($values)) {
                $lang = $language->language;
                $domain = _matterhorn_domain_get_current_domain();
                $vars = _matterhorn_domain_get_variables_by_heirarchy($domain, $lang);
                if ($vars !== FALSE) {
                    foreach ($vars as $key => $var) {
                        $newtoken = '[' . $token . ':' . $key . ']';
                        $values[$newtoken] = $var['value'];
                    }
                }
            }
        break;
    }

    return $values;
}


/**
 * Implementation of the hook_token_info() function
 *
 */
function matterhorn_domain_token_info() {
    $token = variable_get('matterhorn_domain_token', 'matterhorn');
    $types[$token] = array(
        'name' => t("Domain variables"),
        'description' => t("Tokens for domain values."),
    );
    $variable = array();
    $variables = _matterhorn_domain_get_all_variables();

    foreach ($variables as $name => $info) {
        if (!empty($info['name'])) {
            $variable[$name] = array(
                'name' => $info['name'],
                'description' => !empty($info['description']) ? $info['description'] : t('Value of variable !name', array('!name' => $info['name'])),
            );
        }
    }

    return array(
        'types' => $types,
        'tokens' => array(
            $token => $variable,
        ),
    );
}

/**
 * Replace Functions
 *
 */

/**
 * Implementation of the hook_node_view_alter() function
 *
 * Substitute the placeholder values with the tokens on any node
 *
 */
function matterhorn_domain_node_view_alter(&$build) {
    $build['#post_render'][] = '_matterhorn_domain_replace_token';
}

/**
 * Implementation of the hook_block_view_alter function
 *
 * Override the default menu validation to allow saving of tokens in the menu link path field
 *
 */
function matterhorn_domain_block_view_alter(&$data, $block) {
    if (isset($data['content'])) {
        // Blocks without render arrays (typically custom blocks).
        if (is_string($data['content'])) {
            $data['content'] = _matterhorn_domain_replace_token($data['content']);
        }
    }
}

/**
 * Implementation of the hook_views_pre_render() function
 *
 * Substitute the placeholder values with the tokens on any custom text on views
 *
 */
function matterhorn_domain_preprocess_views_view_fields(&$vars) {
    foreach ($vars['fields'] as $key => $value) {
        $vars['fields'][$key]->content = _matterhorn_domain_replace_token($vars['fields'][$key]->content);
    }
}

/**
 * Helper functions
 *
 */
/**
 * Renders tabs markup for all enabled languages w/o using hook_menu().
 *
 * @param $title
 *   - A valid language object property.
 * @param $uppercase
 *   - Renders the tab title in uppercase by default.
 */
function matterhorn_language_tabs($prefix = 'prefix', $uppercase = TRUE) {
    global $language;
    $languages = language_list('enabled');
    $language_list = array();
    $current_key = matterhornCurrentRealmKey();
    $current_query = drupal_get_query_parameters();

    foreach ($languages[1] as $key => $lang) {
        $query = array_replace($current_query, array(
            'matterhorn_realm' => $lang->prefix,
        ));

        $link = l($lang->name, $_GET['q'], array('query' => $query));

        $link_segment = explode('/', $link);
        $link_segment[1] = $lang->prefix;
        $url = implode('/', $link_segment);

        if ($current_key == $lang->prefix) {
            $items[] = '<strong>' . $url . '</strong>';
            continue;
        }

        $items[] = $url;
    }

    return $items;
}

/**
 * Function callback for replacing placeholders with tokens inside
 *
 */
function _matterhorn_domain_replace_token($string) {
    $output = token_replace($string);
    return $output;
}

/**
 * Helper DOMAINS
 *
 */

/**
 * Gets the current domain for the current URL
 * @return string Domain
 *
 */
if (!function_exists('_get_current_domain')) {
    function _get_current_domain() {
        $current_url = url(NULL, array('absolute' => TRUE));
        $pieces = parse_url($current_url);
        $domain = isset($pieces['host']) ? $pieces['host'] : '';

        if (preg_match('/(?P<domain>[a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})$/i', $domain, $regs)) {
            return $regs['domain'];
        }

        return false;
    }
}

/**
 * Returns an array, containing the domain based on the current URL
 *
 */
function _matterhorn_domain_get_current_domain() {

    static $setCookie;
    $current_url = url(NULL, array('absolute' => TRUE));

    // Check if domain mapping is enabled
    $enabled = variable_get('matterhorn_domain_mapping_enable', false);

    if ($enabled) {

        $url = parse_url($current_url);
        $url = $url['host'];
        $domain = _get_current_domain();

        // Check if URL is on the mapping
        $check_mapping = _matterhorn_domain_check_mapping($url);
        if ($check_mapping) {
            // if the current url matches the mapping, replace it with the one in the cookie
            $current_url = isset($_COOKIE['domain_referrer']) ? $_COOKIE['domain_referrer'] : $current_url;
        } else {

            if (empty($_COOKIE['domain_referrer']) || $_COOKIE['domain_referrer'] != $url) {

                if (empty($setCookie)) {
                    // Only sets cookie when values are not the same
                    $setCookie = $url;
                    setcookie('domain_referrer', $setCookie, 0, '/', $domain);
                }

            }

        }
    }

    $domains = _matterhorn_domain_get_domains();

    foreach ($domains as $domain) {
        // get the name of the domain
        $name = isset($domain['name']) ? $domain['name'] : $domain['domain'];
        // check if domain 0name matches with the current URL
        if (strpos($current_url, $name) !== FALSE) {
            return $domain;
        }
    }

    return FALSE;
}

/**
 * Check if the specified URL exists on the domain mapping
 * @param string $url - the URL to be checked
 * @return boolean
 */
function _matterhorn_domain_check_mapping($url) {
    $mapping = explode("\n", variable_get('matterhorn_domain_mapping'));
    // loop through the mapping
    foreach ($mapping as $value) {
        if (trim($value) == trim($url)) {
            return true;
        }
    }
    return false;
}

/**
 * Function for saving logs
 *
 */
function matterhorn_domain_log($scope, $parent, $field, $action, $new_value = '', $old_value = '') {
    global $user;
    global $language;

    $data = array(
        'scope' => $scope,
        'uid' => $user->uid,
        'parent_name' => $parent,
        'field_name' => $field,
        'language' => $language->language,
        'action' => $action,
        'new_value' => $new_value,
        'old_value' => $old_value,
        'created' => time(),
    );

    drupal_write_record('matterhorn_domain_log', $data);
}

/**
 * Logs
 *
 */

/**
 * Function for autocomplete log fields
 *
 */
function matterhorn_domain_log_autocomplete($type, $string = '') {
    //set only allowed fields
    $fields = array(
        'scope' => 'scope',
        'domain' => 'parent_name',
        'field' => 'field_name',
        'lang' => 'language',
        'action' => 'action',
    );

    $matches = array();

    if ($string) {
        $result = db_select('matterhorn_domain_log', 'log')
                ->fields('log', array($fields[$type]))
                ->condition('log.' . $fields[$type], db_like($string) . '%', 'LIKE')
                ->groupBy($fields[$type])
                ->range(0, 10)
                ->execute();
        foreach ($result as $record) {
            $matches[$record->$fields[$type]] = check_plain($record->$fields[$type]);
        }
    }

    drupal_json_output($matches);
}

/**
 * Function for autocomplete log fields for user
 *
 */
function matterhorn_domain_log_autocomplete_user($string = "") {
    $matches = array();

    if ($string) {
        $result = db_select('users')
                ->fields('users', array('name', 'uid'))
                ->condition('name', db_like($string) . '%', 'LIKE')
                ->range(0, 10)
                ->execute();

        foreach ($result as $user) {
            $matches[$user->name] = check_plain($user->name) . " (uid=$user->uid)";
        }
    }

    drupal_json_output($matches);
}
