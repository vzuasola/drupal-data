<?php

/**
 * @file
 * Contains webcomposer_settings.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_help().
 */
function webcomposer_settings_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the webcomposer_settings module.
    case 'help.page.webcomposer_settings':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Web Composer Form Field Filter') . '</p>';
      return $output;

    default:
  }
}

/**
 * Prepares variables for administrative index page templates.
 *
 * Default template: admin-page.html.twig.
 *
 * @param $variables
 *   An associative array containing:
 *   - blocks: An array of blocks to display. Each array should include a
 *     'title', a 'description', a formatted 'content' and a 'position' which
 *     will control which container it will be in. This is usually 'left' or
 *     'right'.
 */
function webcomposer_settings_preprocess_admin_page(&$variables) {
  $settings = \Drupal::getContainer()
    ->get('config.factory')
    ->getEditable('webcomposer_settings.admin_page_entity_blocks_settings')
    ->get();

  $settings['current_user'] = \Drupal::currentUser();

  $blocks = _webcomposer_settings_entity_blocks_link($variables['blocks'], $settings);

  $variables['containers'] = [];
  $stripe = 0;
  foreach ($blocks as $block) {
    if (!empty($block['content']['#content'])) {
      if (empty($block['position'])) {
        // Perform automatic striping.
        $block['position'] = ++$stripe % 2 ? 'left' : 'right';
      }
      $variables['containers'][$block['position']]['blocks'][] = [
        '#theme' => 'admin_block',
        '#block' => $block,
      ];
    }
  }
}

/**
 * Recursively removes the admin blocks and its links.
 */
function _webcomposer_settings_entity_blocks_link(&$blocks, $settings) {
  $master_forms = [
    'webcomposer_config_schema.form_webcomposer_settings_entity_settings',
    'webcomposer_config_schema.form_webcomposer_settings_form_fields_filter_settings',
  ];

  foreach ($blocks as $desc => &$block) {
    foreach ($settings as $menu_name => $value) {
      $menu_id = str_replace('___', ':', $menu_name);
      $menu_id = str_replace('__', '.', $menu_id);

      if (isset($block['url'])) {
        if ($settings['current_user']->id() != '1' && in_array($block['url']->getRouteName(), $master_forms)) {
          unset($blocks[$desc]);
          continue 2;
        }
      }

      if (strpos($desc, $menu_id) > 0 && $value == 1) {
        unset($blocks[$desc]);
        continue 2;
      }
    }

    if (isset($block['content']) && !empty($block['content'])) {
      $block['content']['#content'] = _webcomposer_settings_entity_blocks_link($block['content']['#content'], $settings);
    }
  }

  return $blocks;
}

/**
 * Implements hook_config_schema_form_base_alter().
 */
function webcomposer_settings_config_schema_form_base_alter(&$form) {
  if (isset($form['#disabled_form_filter']) && $form['#disabled_form_filter']) {
    return;
  }

  $excluded_field_types = ['vertical_tabs'];
  $config_id = isset($form['#config_id'][0]) ? $form['#config_id'][0].'__' : '';

  $settings = \Drupal::getContainer()
    ->get('config.factory')
    ->get('webcomposer_settings.form_fields_filter_settings')
    ->get();

  foreach (Element::children($form) as $group_name) {
    if (!in_array($form[$group_name]['#type'], $excluded_field_types)) {
      $fields = Element::children($form[$group_name]);

      foreach ($fields as $key => $field_name) {
        if ($props = Element::children($form[$group_name][$field_name])) {
          foreach ($props as $index => $prop_name) {
            if (isset($settings[$config_id.$prop_name]) && $settings[$config_id.$prop_name] == 0) {
              unset($form[$group_name][$field_name][$prop_name]);
              unset($props[$index]);
            } else if (isset($settings[$prop_name]) && $settings[$prop_name] == 0) { // Getting the old config
              unset($form[$group_name][$field_name][$prop_name]);
              unset($props[$index]);
            }

            if (empty($props)) {
              unset($form[$group_name][$field_name]);
            }
          }
        }
        if (isset($settings[$config_id.$field_name]) && $settings[$config_id.$field_name] == 0) {
          unset($form[$group_name][$field_name]);
          unset($fields[$key]);
        } else if (isset($settings[$field_name]) && $settings[$field_name] == 0) { // Getting the old config
          unset($form[$group_name][$field_name]);
          unset($fields[$key]);
        }
      }

      if (empty(Element::children($form[$group_name])) && $form[$group_name]['#type'] == 'details') {
        unset($form[$group_name]);
      }

      if (isset($form[$group_name]) &&
          isset($settings[$config_id.$group_name]) &&
          $settings[$config_id.$group_name] == 0) {
            unset($form[$group_name]);
      } else if (isset($form[$group_name]) &&
          isset($settings[$group_name]) &&
          $settings[$group_name] == 0) { // Getting the old config
            unset($form[$group_name]);
      }
    }
  }
}

