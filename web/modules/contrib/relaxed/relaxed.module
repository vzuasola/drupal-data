<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\relaxed\Entity\Remote;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;

/**
 * Implements hook_entity_insert().
 */
function relaxed_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'workspace') {
    // In some cases (mostly testing) the plugin manager is not yet initialized.
    // @todo {@link https://www.drupal.org/node/2599864 Fix this.}
    try {
      \Drupal::service('plugin.manager.rest')->clearCachedDefinitions();
    } catch (InvalidArgumentException $e) {
      watchdog_exception('relaxed', $e);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function relaxed_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'workspace') {
    // In some cases (mostly testing) the plugin manager is not yet initialized.
    // @todo {@link https://www.drupal.org/node/2599864 Fix this.}
    try {
      \Drupal::service('plugin.manager.rest')->clearCachedDefinitions();
    } catch (InvalidArgumentException $e) {
      watchdog_exception('relaxed', $e);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function relaxed_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'workspace') {
    // In some cases (mostly testing) the plugin manager is not yet initialized.
    // @todo {@link https://www.drupal.org/node/2599864 Fix this.}
    try {
      \Drupal::service('plugin.manager.rest')->clearCachedDefinitions();
    } catch (InvalidArgumentException $e) {
      watchdog_exception('relaxed', $e);
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function relaxed_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $multiversion_manager = \Drupal::service('multiversion.manager');
  $entity_type = $entity->getEntityType();
  $entity_type_id = $entity_type->id();

  // Set entity access restrictions depending on pull and push permissions.
  if ($multiversion_manager->isEnabledEntityType($entity_type) || $entity_type_id == 'replication_log') {
    if ($operation == 'view') {
      return AccessResult::allowedIfHasPermissions($account, ['perform push replication', 'perform pull replication'], 'OR');
    }
    else {
      return AccessResult::allowedIfHasPermission($account, 'perform push replication');
    }
  // No opinion.
}

return AccessResult::neutral();
}

/**
 * Implements hook_entity_create_access().
 */
function multiversion_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $multiversion_manager = \Drupal::service('multiversion.manager');
  $bundles_info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
  foreach ($bundles_info as $entity_type_id => $bundles) {
    if (in_array($entity_bundle, array_keys($bundles))) {
      $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
      if ($multiversion_manager->isEnabledEntityType($entity_type) || $entity_type_id == 'replication_log') {
        return AccessResult::allowedIfHasPermission($account, 'perform push replication');
      }
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_field_access().
 */
function relaxed_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // Set entity access restrictions depending on pull and push permissions.
  if ($operation == 'view') {
    return AccessResult::allowedIfHasPermissions($account, ['perform push replication', 'perform pull replication'], 'OR');
  }
  else {
    return AccessResult::allowedIfHasPermission($account, 'perform push replication');
  }
}

/**
 * Implements hook_requirements().
 */
function relaxed_requirements($phase) {
  if ($phase === 'runtime') {
    $requirements = [];
    $remote_checks = \Drupal::service('plugin.manager.remote_check')->runAll();
    foreach ($remote_checks as $remote_id => $checks) {
      $remote = Remote::load($remote_id);
      $severity = true;
      $messages = [];
      foreach ($checks as $check_id => $check) {
        $messages[] = $check['message'];
        $severity = $check['result'] ? true : false;
      }
      $build = [
        '#theme' => 'item_list',
        '#items' => $messages,
      ];
      $description = \Drupal::service('renderer')->render($build);
      $requirements[$remote_id] = [
        'title' => t('Relaxed Remote: @remote', ['@remote' => $remote->label()]),
        'description' => $description,
        'severity' => $severity ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      ];

      $replicator_exists = class_exists('Relaxed\Replicator\Replicator');
      $couchdbclient_exists = class_exists('Doctrine\CouchDB\CouchDBClient');

      if (!$replicator_exists) {
        $requirements['replicator'] = [
          'title' => t('relaxedws/replicator'),
          'value' => t('Not found'),
          'severity' => REQUIREMENT_ERROR,
          'description' => t('The <a href=":replicator_url">relaxedws/replicator</a> library is not available. This library is required by RELAXed Web Services.', [':replicator_url' => 'https://packagist.org/packages/relaxedws/replicator'])
        ];
      }

      if (!$couchdbclient_exists) {
        $requirements['couchdb'] = [
          'title' => t('doctrine/couchdb'),
          'value' => t('Not found'),
          'severity' => REQUIREMENT_ERROR,
          'description' => t('The <a href=":couchdb_url">doctrine/couchdb</a> library is not available. This library is required by RELAXed Web Services.', [':couchdb_url' => 'https://packagist.org/packages/doctrine/couchdb'])
        ];
      }
    }

    return $requirements;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function relaxed_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'workspace_pointer') {
    return [];
  }

  $fields['remote_pointer'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Remote'))
    ->setDescription(t('A reference to the remote'))
    ->setSetting('target_type', 'remote')
    ->setRevisionable(TRUE);

  $fields['remote_database'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Remote database'))
    ->setDescription(t('The remote database name.'))
    ->setSettings(array(
      'max_length' => 50,
      'text_processing' => 0,
    ))
    ->setRevisionable(TRUE);

  return $fields;
}

/**
 * Implements hook_cron().
 */
function relaxed_cron() {
  \Drupal::service('relaxed.remote_pointer')->addAllPointers();
}

function relaxed_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  if (isset($entity_types['rest_resource_config'])) {
    $entity_types['rest_resource_config']->setClass('Drupal\relaxed\Entity\RestResourceConfig');
  }
}
